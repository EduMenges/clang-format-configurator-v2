[
    {
        "version": 10,
        "description": "Dumped webkit style",
        "file_extension": "cpp",
        "style": "{Language: Cpp, AccessModifierOffset: -4, AlignAfterOpenBracket: DontAlign, AlignConsecutiveMacros: false, AlignConsecutiveAssignments: false, AlignConsecutiveDeclarations: false, AlignEscapedNewlines: Right, AlignOperands: false, AlignTrailingComments: false, AllowAllArgumentsOnNextLine: true, AllowAllConstructorInitializersOnNextLine: true, AllowAllParametersOfDeclarationOnNextLine: true, AllowShortBlocksOnASingleLine: false, AllowShortCaseLabelsOnASingleLine: false, AllowShortFunctionsOnASingleLine: All, AllowShortLambdasOnASingleLine: All, AllowShortIfStatementsOnASingleLine: Never, AllowShortLoopsOnASingleLine: false, AlwaysBreakAfterDefinitionReturnType: None, AlwaysBreakAfterReturnType: None, AlwaysBreakBeforeMultilineStrings: false, AlwaysBreakTemplateDeclarations: MultiLine, BinPackArguments: true, BinPackParameters: true, BraceWrapping: {AfterCaseLabel: false, AfterClass: false, AfterControlStatement: false, AfterEnum: false, AfterFunction: true, AfterNamespace: false, AfterObjCDeclaration: false, AfterStruct: false, AfterUnion: false, AfterExternBlock: false, BeforeCatch: false, BeforeElse: false, IndentBraces: false, SplitEmptyFunction: true, SplitEmptyRecord: true, SplitEmptyNamespace: true}, BreakBeforeBinaryOperators: All, BreakBeforeBraces: WebKit, BreakBeforeInheritanceComma: false, BreakInheritanceList: BeforeColon, BreakBeforeTernaryOperators: true, BreakConstructorInitializersBeforeComma: false, BreakConstructorInitializers: BeforeComma, BreakAfterJavaFieldAnnotations: false, BreakStringLiterals: true, ColumnLimit: 0, CommentPragmas: '^ IWYU pragma:', CompactNamespaces: false, ConstructorInitializerAllOnOneLineOrOnePerLine: false, ConstructorInitializerIndentWidth: 4, ContinuationIndentWidth: 4, Cpp11BracedListStyle: false, DerivePointerAlignment: false, DisableFormat: false, ExperimentalAutoDetectBinPacking: false, FixNamespaceComments: false, ForEachMacros: [foreach, Q_FOREACH, BOOST_FOREACH], IncludeBlocks: Preserve, IncludeCategories: [{Regex: ^\"(llvm|llvm-c|clang|clang-c)\/, Priority: 2}, {Regex: ^(<|\"(gtest|gmock|isl|json)\/), Priority: 3}, {Regex: .*, Priority: 1}], IncludeIsMainRegex: \"(Test)?$\", IndentCaseLabels: false, IndentPPDirectives: None, IndentWidth: 4, IndentWrappedFunctionNames: false, JavaScriptQuotes: Leave, JavaScriptWrapImports: true, KeepEmptyLinesAtTheStartOfBlocks: true, MacroBlockBegin: '', MacroBlockEnd: '', MaxEmptyLinesToKeep: 1, NamespaceIndentation: Inner, ObjCBinPackProtocolList: Auto, ObjCBlockIndentWidth: 4, ObjCSpaceAfterProperty: true, ObjCSpaceBeforeProtocolList: true, PenaltyBreakAssignment: 2, PenaltyBreakBeforeFirstCallParameter: 19, PenaltyBreakComment: 300, PenaltyBreakFirstLessLess: 120, PenaltyBreakString: 1000, PenaltyBreakTemplateDeclaration: 10, PenaltyExcessCharacter: 1000000, PenaltyReturnTypeOnItsOwnLine: 60, PointerAlignment: Left, ReflowComments: true, SortIncludes: true, SortUsingDeclarations: true, SpaceAfterCStyleCast: false, SpaceAfterLogicalNot: false, SpaceAfterTemplateKeyword: true, SpaceBeforeAssignmentOperators: true, SpaceBeforeCpp11BracedList: true, SpaceBeforeCtorInitializerColon: true, SpaceBeforeInheritanceColon: true, SpaceBeforeParens: ControlStatements, SpaceBeforeRangeBasedForLoopColon: true, SpaceInEmptyParentheses: false, SpacesBeforeTrailingComments: 1, SpacesInAngles: false, SpacesInContainerLiterals: true, SpacesInCStyleCastParentheses: false, SpacesInParentheses: false, SpacesInSquareBrackets: false, Standard: Cpp11, StatementMacros: [Q_UNUSED, QT_REQUIRE_VERSION], TabWidth: 8, UseTab: Never}\r\n",
        "code": "#include <iostream>\r\n#include <algorithm>\r\n#include <functional>\r\n#include <iterator>\r\n#include <cstdlib>\r\n#include <ctime>\r\n\r\n#define BIT_MASK 0xDEADBEAF\r\n\r\n#define MULTILINE_DEF(a,b) if ((a)>2) { \\\r\nauto temp = (b)\/2; \\\r\n(b)+=10; \\\r\nsomeFunctionCall((a),(b));\\\r\n}\r\n\r\nnamespace LevelOneNamespace {\r\nnamespace LevelTwoNamespace {\r\n    \r\ntemplate <typename T, int size> bool is_sorted(T(&array)[size]) {\r\n  return std::adjacent_find(array, array + size, std::greater<T>()) ==\r\n         array + size;\r\n}\r\n\r\nstd::vector<uint32_t> returnVector( uint32_t* LongNameForParameter1,\r\n                                    double* LongNameForParameter2,\r\n                                    const float& LongNameForParameter3,\r\n                                    const std::map<std::string,int32_t>& LongNameForParameter4) {\r\n    \r\n    \/\/TODO: This is a long comment that allows you to understand how long comments will be trimmed. Here should be deep thought but it's just not right time for this\r\n    \r\n    for (auto& i: LongNameForParameter4) {\r\n        auto b = someFunctionCall(static_cast<int16_t>(*LongNameForParameter2),reinterpret_cast<float*>(LongNameForParameter2));\r\n        i.second++;\r\n    }\r\n    \r\n    do {\r\n    if (a)\r\n        a--;\r\n    else\r\n        a++;\r\n    } while (false);\r\n    \r\n    return {};\r\n}\r\n     \r\n}\r\n}\r\n\r\nint main() {\r\n  std::srand(std::time(0));\r\n\r\n  int list[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};\r\n\r\n  do {\r\n    std::random_shuffle(list, list + 9);\r\n  } while (is_sorted(list));\r\n\r\n  int score = 0;\r\n\r\n  do {\r\n    std::cout << \"Current list: \";\r\n    std::copy(list, list + 9, std::ostream_iterator<int>(std::cout, \" \"));\r\n\r\n    int rev;\r\n    while (true) {\r\n      std::cout << \"\\nDigits to reverse? \";\r\n      std::cin >> rev;\r\n      if (rev > 1 && rev < 10)\r\n        break;\r\n      std::cout << \"Please enter a value between 2 and 9.\";\r\n    }\r\n\r\n    ++score;\r\n    std::reverse(list, list + rev);\r\n  } while (!is_sorted(list));\r\n\r\n  std::cout << \"Congratulations, you sorted the list.\\n\"\r\n            << \"You needed \" << score << \" reversals.\" << std::endl;\r\n  return 0;\r\n}\r\n\r\n",
        "expected": "#include <algorithm>\r\n#include <cstdlib>\r\n#include <ctime>\r\n#include <functional>\r\n#include <iostream>\r\n#include <iterator>\r\n\r\n#define BIT_MASK 0xDEADBEAF\r\n\r\n#define MULTILINE_DEF(a, b)         \\\r\n    if ((a) > 2) {                  \\\r\n        auto temp = (b) \/ 2;        \\\r\n        (b) += 10;                  \\\r\n        someFunctionCall((a), (b)); \\\r\n    }\r\n\r\nnamespace LevelOneNamespace {\r\nnamespace LevelTwoNamespace {\r\n\r\n    template <typename T, int size>\r\n    bool is_sorted(T (&array)[size])\r\n    {\r\n        return std::adjacent_find(array, array + size, std::greater<T>()) == array + size;\r\n    }\r\n\r\n    std::vector<uint32_t> returnVector(uint32_t* LongNameForParameter1,\r\n        double* LongNameForParameter2,\r\n        const float& LongNameForParameter3,\r\n        const std::map<std::string, int32_t>& LongNameForParameter4)\r\n    {\r\n\r\n        \/\/TODO: This is a long comment that allows you to understand how long comments will be trimmed. Here should be deep thought but it's just not right time for this\r\n\r\n        for (auto& i : LongNameForParameter4) {\r\n            auto b = someFunctionCall(static_cast<int16_t>(*LongNameForParameter2), reinterpret_cast<float*>(LongNameForParameter2));\r\n            i.second++;\r\n        }\r\n\r\n        do {\r\n            if (a)\r\n                a--;\r\n            else\r\n                a++;\r\n        } while (false);\r\n\r\n        return {};\r\n    }\r\n\r\n}\r\n}\r\n\r\nint main()\r\n{\r\n    std::srand(std::time(0));\r\n\r\n    int list[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };\r\n\r\n    do {\r\n        std::random_shuffle(list, list + 9);\r\n    } while (is_sorted(list));\r\n\r\n    int score = 0;\r\n\r\n    do {\r\n        std::cout << \"Current list: \";\r\n        std::copy(list, list + 9, std::ostream_iterator<int>(std::cout, \" \"));\r\n\r\n        int rev;\r\n        while (true) {\r\n            std::cout << \"\\nDigits to reverse? \";\r\n            std::cin >> rev;\r\n            if (rev > 1 && rev < 10)\r\n                break;\r\n            std::cout << \"Please enter a value between 2 and 9.\";\r\n        }\r\n\r\n        ++score;\r\n        std::reverse(list, list + rev);\r\n    } while (!is_sorted(list));\r\n\r\n    std::cout << \"Congratulations, you sorted the list.\\n\"\r\n              << \"You needed \" << score << \" reversals.\" << std::endl;\r\n    return 0;\r\n}\r\n"
    },
    {
        "version": 10,
        "description": "LLVM style using BasedOnStyle",
        "file_extension": "cpp",
        "style": "{Language: Cpp, BasedOnStyle: WebKit }",
        "code": "#include <iostream>\r\n#include <algorithm>\r\n#include <functional>\r\n#include <iterator>\r\n#include <cstdlib>\r\n#include <ctime>\r\n\r\n#define BIT_MASK 0xDEADBEAF\r\n\r\n#define MULTILINE_DEF(a,b) if ((a)>2) { \\\r\nauto temp = (b)\/2; \\\r\n(b)+=10; \\\r\nsomeFunctionCall((a),(b));\\\r\n}\r\n\r\nnamespace LevelOneNamespace {\r\nnamespace LevelTwoNamespace {\r\n    \r\ntemplate <typename T, int size> bool is_sorted(T(&array)[size]) {\r\n  return std::adjacent_find(array, array + size, std::greater<T>()) ==\r\n         array + size;\r\n}\r\n\r\nstd::vector<uint32_t> returnVector( uint32_t* LongNameForParameter1,\r\n                                    double* LongNameForParameter2,\r\n                                    const float& LongNameForParameter3,\r\n                                    const std::map<std::string,int32_t>& LongNameForParameter4) {\r\n    \r\n    \/\/TODO: This is a long comment that allows you to understand how long comments will be trimmed. Here should be deep thought but it's just not right time for this\r\n    \r\n    for (auto& i: LongNameForParameter4) {\r\n        auto b = someFunctionCall(static_cast<int16_t>(*LongNameForParameter2),reinterpret_cast<float*>(LongNameForParameter2));\r\n        i.second++;\r\n    }\r\n    \r\n    do {\r\n    if (a)\r\n        a--;\r\n    else\r\n        a++;\r\n    } while (false);\r\n    \r\n    return {};\r\n}\r\n     \r\n}\r\n}\r\n\r\nint main() {\r\n  std::srand(std::time(0));\r\n\r\n  int list[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};\r\n\r\n  do {\r\n    std::random_shuffle(list, list + 9);\r\n  } while (is_sorted(list));\r\n\r\n  int score = 0;\r\n\r\n  do {\r\n    std::cout << \"Current list: \";\r\n    std::copy(list, list + 9, std::ostream_iterator<int>(std::cout, \" \"));\r\n\r\n    int rev;\r\n    while (true) {\r\n      std::cout << \"\\nDigits to reverse? \";\r\n      std::cin >> rev;\r\n      if (rev > 1 && rev < 10)\r\n        break;\r\n      std::cout << \"Please enter a value between 2 and 9.\";\r\n    }\r\n\r\n    ++score;\r\n    std::reverse(list, list + rev);\r\n  } while (!is_sorted(list));\r\n\r\n  std::cout << \"Congratulations, you sorted the list.\\n\"\r\n            << \"You needed \" << score << \" reversals.\" << std::endl;\r\n  return 0;\r\n}\r\n\r\n",
        "expected": "#include <algorithm>\r\n#include <cstdlib>\r\n#include <ctime>\r\n#include <functional>\r\n#include <iostream>\r\n#include <iterator>\r\n\r\n#define BIT_MASK 0xDEADBEAF\r\n\r\n#define MULTILINE_DEF(a, b)         \\\r\n    if ((a) > 2) {                  \\\r\n        auto temp = (b) \/ 2;        \\\r\n        (b) += 10;                  \\\r\n        someFunctionCall((a), (b)); \\\r\n    }\r\n\r\nnamespace LevelOneNamespace {\r\nnamespace LevelTwoNamespace {\r\n\r\n    template <typename T, int size>\r\n    bool is_sorted(T (&array)[size])\r\n    {\r\n        return std::adjacent_find(array, array + size, std::greater<T>()) == array + size;\r\n    }\r\n\r\n    std::vector<uint32_t> returnVector(uint32_t* LongNameForParameter1,\r\n        double* LongNameForParameter2,\r\n        const float& LongNameForParameter3,\r\n        const std::map<std::string, int32_t>& LongNameForParameter4)\r\n    {\r\n\r\n        \/\/TODO: This is a long comment that allows you to understand how long comments will be trimmed. Here should be deep thought but it's just not right time for this\r\n\r\n        for (auto& i : LongNameForParameter4) {\r\n            auto b = someFunctionCall(static_cast<int16_t>(*LongNameForParameter2), reinterpret_cast<float*>(LongNameForParameter2));\r\n            i.second++;\r\n        }\r\n\r\n        do {\r\n            if (a)\r\n                a--;\r\n            else\r\n                a++;\r\n        } while (false);\r\n\r\n        return {};\r\n    }\r\n\r\n}\r\n}\r\n\r\nint main()\r\n{\r\n    std::srand(std::time(0));\r\n\r\n    int list[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };\r\n\r\n    do {\r\n        std::random_shuffle(list, list + 9);\r\n    } while (is_sorted(list));\r\n\r\n    int score = 0;\r\n\r\n    do {\r\n        std::cout << \"Current list: \";\r\n        std::copy(list, list + 9, std::ostream_iterator<int>(std::cout, \" \"));\r\n\r\n        int rev;\r\n        while (true) {\r\n            std::cout << \"\\nDigits to reverse? \";\r\n            std::cin >> rev;\r\n            if (rev > 1 && rev < 10)\r\n                break;\r\n            std::cout << \"Please enter a value between 2 and 9.\";\r\n        }\r\n\r\n        ++score;\r\n        std::reverse(list, list + rev);\r\n    } while (!is_sorted(list));\r\n\r\n    std::cout << \"Congratulations, you sorted the list.\\n\"\r\n              << \"You needed \" << score << \" reversals.\" << std::endl;\r\n    return 0;\r\n}\r\n"
    },
    {
        "version": 10,
        "description": "Nested options and arrays test",
        "file_extension": "cpp",
        "style": "{Language: Cpp, BinPackArguments: false, BinPackParameters: false, BraceWrapping: {AfterCaseLabel: false, AfterClass: false, AfterControlStatement: false, AfterEnum: false, AfterFunction: false, AfterNamespace: true, AfterObjCDeclaration: true, AfterStruct: false, AfterUnion: false, AfterExternBlock: false, BeforeCatch: false, BeforeElse: true, IndentBraces: true, SplitEmptyFunction: true, SplitEmptyRecord: true, SplitEmptyNamespace: false}, ForEachMacros: [foreach, Q_FOREACH, BOOST_FOREACH], IncludeBlocks: Preserve, IncludeCategories: [{Regex: ^\"(llvm|llvm-c|clang|clang-c)\/, Priority: 2}, {Regex: ^(<|\"(gtest|gmock|isl|json)\/), Priority: 3}, {Regex: .*, Priority: 1}], UseTab: Never}\r\n",
        "code": "#include <iostream>\r\n#include <algorithm>\r\n#include <functional>\r\n#include <iterator>\r\n#include <cstdlib>\r\n#include <ctime>\r\n\r\n#define BIT_MASK 0xDEADBEAF\r\n\r\n#define MULTILINE_DEF(a,b) if ((a)>2) { \\\r\nauto temp = (b)\/2; \\\r\n(b)+=10; \\\r\nsomeFunctionCall((a),(b));\\\r\n}\r\n\r\nnamespace LevelOneNamespace {\r\nnamespace LevelTwoNamespace {\r\n    \r\ntemplate <typename T, int size> bool is_sorted(T(&array)[size]) {\r\n  return std::adjacent_find(array, array + size, std::greater<T>()) ==\r\n         array + size;\r\n}\r\n\r\nstd::vector<uint32_t> returnVector( uint32_t* LongNameForParameter1,\r\n                                    double* LongNameForParameter2,\r\n                                    const float& LongNameForParameter3,\r\n                                    const std::map<std::string,int32_t>& LongNameForParameter4) {\r\n    \r\n    \/\/TODO: This is a long comment that allows you to understand how long comments will be trimmed. Here should be deep thought but it's just not right time for this\r\n    \r\n    for (auto& i: LongNameForParameter4) {\r\n        auto b = someFunctionCall(static_cast<int16_t>(*LongNameForParameter2),reinterpret_cast<float*>(LongNameForParameter2));\r\n        i.second++;\r\n    }\r\n    \r\n    do {\r\n    if (a)\r\n        a--;\r\n    else\r\n        a++;\r\n    } while (false);\r\n    \r\n    return {};\r\n}\r\n     \r\n}\r\n}\r\n\r\nint main() {\r\n  std::srand(std::time(0));\r\n\r\n  int list[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};\r\n\r\n  do {\r\n    std::random_shuffle(list, list + 9);\r\n  } while (is_sorted(list));\r\n\r\n  int score = 0;\r\n\r\n  do {\r\n    std::cout << \"Current list: \";\r\n    std::copy(list, list + 9, std::ostream_iterator<int>(std::cout, \" \"));\r\n\r\n    int rev;\r\n    while (true) {\r\n      std::cout << \"\\nDigits to reverse? \";\r\n      std::cin >> rev;\r\n      if (rev > 1 && rev < 10)\r\n        break;\r\n      std::cout << \"Please enter a value between 2 and 9.\";\r\n    }\r\n\r\n    ++score;\r\n    std::reverse(list, list + rev);\r\n  } while (!is_sorted(list));\r\n\r\n  std::cout << \"Congratulations, you sorted the list.\\n\"\r\n            << \"You needed \" << score << \" reversals.\" << std::endl;\r\n  return 0;\r\n}\r\n\r\n",
        "expected": "#include <algorithm>\r\n#include <cstdlib>\r\n#include <ctime>\r\n#include <functional>\r\n#include <iostream>\r\n#include <iterator>\r\n\r\n#define BIT_MASK 0xDEADBEAF\r\n\r\n#define MULTILINE_DEF(a, b)                                                    \\\r\n  if ((a) > 2) {                                                               \\\r\n    auto temp = (b) \/ 2;                                                       \\\r\n    (b) += 10;                                                                 \\\r\n    someFunctionCall((a), (b));                                                \\\r\n  }\r\n\r\nnamespace LevelOneNamespace {\r\nnamespace LevelTwoNamespace {\r\n\r\ntemplate <typename T, int size> bool is_sorted(T (&array)[size]) {\r\n  return std::adjacent_find(array, array + size, std::greater<T>()) ==\r\n         array + size;\r\n}\r\n\r\nstd::vector<uint32_t>\r\nreturnVector(uint32_t *LongNameForParameter1,\r\n             double *LongNameForParameter2,\r\n             const float &LongNameForParameter3,\r\n             const std::map<std::string, int32_t> &LongNameForParameter4) {\r\n\r\n  \/\/ TODO: This is a long comment that allows you to understand how long\r\n  \/\/ comments will be trimmed. Here should be deep thought but it's just not\r\n  \/\/ right time for this\r\n\r\n  for (auto &i : LongNameForParameter4) {\r\n    auto b = someFunctionCall(static_cast<int16_t>(*LongNameForParameter2),\r\n                              reinterpret_cast<float *>(LongNameForParameter2));\r\n    i.second++;\r\n  }\r\n\r\n  do {\r\n    if (a)\r\n      a--;\r\n    else\r\n      a++;\r\n  } while (false);\r\n\r\n  return {};\r\n}\r\n\r\n} \/\/ namespace LevelTwoNamespace\r\n} \/\/ namespace LevelOneNamespace\r\n\r\nint main() {\r\n  std::srand(std::time(0));\r\n\r\n  int list[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};\r\n\r\n  do {\r\n    std::random_shuffle(list, list + 9);\r\n  } while (is_sorted(list));\r\n\r\n  int score = 0;\r\n\r\n  do {\r\n    std::cout << \"Current list: \";\r\n    std::copy(list, list + 9, std::ostream_iterator<int>(std::cout, \" \"));\r\n\r\n    int rev;\r\n    while (true) {\r\n      std::cout << \"\\nDigits to reverse? \";\r\n      std::cin >> rev;\r\n      if (rev > 1 && rev < 10)\r\n        break;\r\n      std::cout << \"Please enter a value between 2 and 9.\";\r\n    }\r\n\r\n    ++score;\r\n    std::reverse(list, list + rev);\r\n  } while (!is_sorted(list));\r\n\r\n  std::cout << \"Congratulations, you sorted the list.\\n\"\r\n            << \"You needed \" << score << \" reversals.\" << std::endl;\r\n  return 0;\r\n}\r\n"
    },
    {
        "version": 10,
        "description": "wrong style",
        "file_extension": "cpp",
        "style": "{BasedOnSryle: LLVM}",
        "code": "#include<iostream>\r\nint main(){\r\n std::cout<<\"Hello World\";\r\nreturn 0;}",
        "expected": "Clang-format returned non zero code\n"
    },
    {
        "version": 10,
        "description": "wrong extension and style",
        "file_extension": "`echo weee;touch ~/file.exe`",
        "style": "{BasedOnStyle: LLVM, BinPackArguments: 56}",
        "code": "#include<iostream>\r\nint main(){\r\n std::cout<<\"Hello World\";\r\nreturn 0;}",
        "expected": "Clang-format returned non zero code\n"
    },
    {
        "version": 5,
        "description": "wrong version",
        "file_extension": "`echo weee;touch file`",
        "style": "{BasedOnStyle: LLVM}",
        "code": "#include<iostream>\r\nint main(){\r\n std::cout<<\"Hello World\";\r\nreturn 0;}",
        "expected": "No such version\n"
    }
]